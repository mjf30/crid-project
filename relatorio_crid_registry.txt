\documentclass[conference]{IEEEtran}

% --- PACOTES ---
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{url}
\usepackage{hyperref}
\usepackage{listings} % Para blocos de código formatados

% --- CONFIGURAÇÕES DE ESTILO ---
\hypersetup{
    colorlinks=true,
    linkcolor=blue,
    filecolor=magenta,      
    urlcolor=cyan,
}
\lstset{
    language=Solidity,
    basicstyle=\footnotesize\ttfamily,
    keywordstyle=\color{blue},
    commentstyle=\color{green!50!black},
    stringstyle=\color{red},
    breaklines=true,
    frame=single,
    tabsize=2,
    showstringspaces=false
}

% --- INFORMAÇÕES DO DOCUMENTO ---
\title{CRID-Registry: Arquitetura e Implementação de um Cartório Digital On-Chain para Certificados Acadêmicos}

\author{
    \IEEEauthorblockN{Seu Nome Aqui}
    \IEEEauthorblockA{
        Sua Afiliação Aqui (Ex: Nome da Universidade)\\
        Sua Cidade, Seu Estado\\
        Email: seu.email@exemplo.com
    }
}

\begin{document}

\maketitle

% --- RESUMO ---
\begin{abstract}
A autenticidade e a perenidade de certificados acadêmicos são pilares para a confiança no sistema educacional. Sistemas tradicionais, no entanto, são vulneráveis a fraudes, perdas e ineficiências operacionais. Este relatório apresenta uma análise aprofundada do desenvolvimento do CRID-Registry, um sistema de registro de certificados on-chain construído na blockchain Ethereum. O documento detalha a arquitetura de registro customizado, argumentando que o controle autoritativo e a natureza não transferível dos registros são ideais para credenciais acadêmicas. A implementação do smart contract \texttt{CridRegistry.sol} é dissecada, incluindo suas estruturas de dados, funções de controle de acesso, emissão, revogação e consulta. Finalmente, a metodologia de testes e os resultados são apresentados, validando a robustez do sistema.
\end{abstract}

% --- PALAVRAS-CHAVE ---
\begin{IEEEkeywords}
Blockchain, Smart Contract, Solidity, Hardhat, Certificados Digitais, Registro On-Chain, Controle de Acesso, Ethereum.
\end{IEEEkeywords}

\IEEEpeerreviewmaketitle

% --- SEÇÃO 1: INTRODUÇÃO ---
\section{Introdução}
A verificação de credenciais acadêmicas é um processo historicamente analógico e centralizado, propenso a falsificações e burocracia. A digitalização desses processos, embora tenha trazido melhorias, frequentemente apenas transfere a centralização para bancos de dados proprietários, mantendo a dependência de uma única entidade para validação e preservação dos registros.

A tecnologia blockchain, com sua natureza de registro distribuído, imutável e transparente, oferece um paradigma fundamentalmente superior para este caso de uso. Ao registrar um certificado na blockchain, cria-se uma prova de existência e autenticidade que é resistente à censura, independente de qualquer instituição central e perpetuamente acessível.

O objetivo deste projeto foi desenvolver um sistema para a emissão e gestão de Certificados de Registro de Inscrição em Disciplina (CRID) que aproveitasse essas características, resultando em um sistema que funciona como um cartório digital on-chain.

% --- SEÇÃO 2: ARQUITETURA DO SISTEMA ---
\section{Arquitetura do Sistema}
A arquitetura do CRID-Registry foi projetada para funcionar como um cartório digital, onde o smart contract é a única fonte da verdade para a validade dos certificados. Este modelo foi escolhido por oferecer controle total à instituição emissora, garantir a perenidade dos dados e alinhar-se com a natureza de um registro oficial.

A abordagem de registro customizado armazena todos os dados essenciais do certificado diretamente na blockchain. Isso garante máxima disponibilidade e imutabilidade, eliminando dependências de sistemas de armazenamento externos. O modelo é inerentemente mais simples e seguro para este caso de uso, pois evita a complexidade e as implicações de transferibilidade de outros padrões de token.

\subsection{Pilha Tecnológica}
\begin{itemize}
    \item \textbf{Solidity (\texttt{\textasciicircum0.8.20}):} Linguagem de programação para o smart contract.
    \item \textbf{Hardhat:} Ambiente de desenvolvimento para compilação, testes e deploy.
    \item \textbf{OpenZeppelin Contracts:} Utilizado para a implementação segura do padrão de controle de acesso \texttt{Ownable.sol}.
    \item \textbf{Ethers.js \& Chai:} Frameworks para a escrita de testes automatizados robustos.
\end{itemize}

% --- SEÇÃO 3: IMPLEMENTAÇÃO DO SMART CONTRACT ---
\section{Implementação do Smart Contract}
O contrato \texttt{CridRegistry.sol} é o núcleo do sistema.

\subsection{Estruturas de Dados Centrais}
A base do registro é a combinação de um \texttt{struct} para definir o certificado e um \texttt{mapping} para armazená-lo.

\begin{lstlisting}[caption={Estrutura de Dados do Certificado}, label=lst:struct]
struct Certificado {
    uint256 id;
    address studentAddress;
    string courseName;
    string professorName;
    uint256 issueDate;
    bool isValid;
}

mapping(uint256 => Certificado) private _certificates;
uint256 private _nextCertificateId;
\end{lstlisting}

\subsection{Controle de Acesso}
O contrato herda de \texttt{Ownable.sol}, o que fornece o modificador \texttt{onlyOwner}. Isso restringe funções críticas, como a emissão e revogação, exclusivamente ao endereço que fez o deploy do contrato (a instituição).

\subsection{Funções Principais}
\subsubsection{Emissão de Certificados}
A função \texttt{issueCertificate} é a porta de entrada para novos registros.
\begin{lstlisting}[caption={Função de Emissão}]
function issueCertificate(
    address _studentAddress,
    string memory _courseName,
    string memory _professorName
) public onlyOwner { ... }
\end{lstlisting}

\subsubsection{Revogação de Certificados}
A revogação é implementada como um "soft delete", alterando o estado do certificado sem apagar o registro histórico.
\begin{lstlisting}[caption={Função de Revogação}]
function revokeCertificate(uint256 _certificateId) 
    public 
    onlyOwner 
{ ... }
\end{lstlisting}

\subsubsection{Consulta Pública}
A função \texttt{getCertificate} serve como o endpoint público para verificação.

\subsection{Eventos}
Os eventos \texttt{CertificateIssued} e \texttt{CertificateRevoked} são emitidos para facilitar a indexação de dados por serviços off-chain.

% --- SEÇÃO 4: VERIFICAÇÃO E TESTES ---
\section{Verificação e Testes}
A validação do contrato foi realizada através de uma suíte de testes unitários abrangente.

\subsubsection{Cenários de Teste}
\begin{itemize}
    \item \textbf{Estado Inicial:} Verificação do proprietário do contrato.
    \item \textbf{Lógica de Emissão:} Garantia de que apenas o proprietário pode emitir e que os dados são gravados corretamente.
    \item \textbf{Lógica de Revogação:} Validação de que apenas o proprietário pode revogar e que o status é atualizado.
    \item \textbf{Controle de Acesso:} Testes de reversão para chamadas não autorizadas.
    \item \textbf{Casos de Borda:} Tentativa de revogar certificados inexistentes.
\end{itemize}

\subsubsection{Resultados}
Todos os casos de teste passaram com sucesso, indicando que o smart contract se comporta conforme o esperado.

% --- SEÇÃO 5: CONCLUSÃO ---
\section{Conclusão}
O projeto CRID-Registry implementou com sucesso um sistema de registro on-chain para certificados acadêmicos. A arquitetura de cartório digital provou ser uma solução robusta e adequada, priorizando a integridade e o controle autoritativo dos registros. A implementação resultante é segura, eficiente e serve como uma base sólida para um ecossistema de verificação de credenciais descentralizado e confiável.

% --- SEÇÃO 6: TRABALHOS FUTUROS ---
\section{Trabalhos Futuros}
\begin{itemize}
    \item \textbf{Interface de Usuário (DApp):} Desenvolver uma aplicação web para emissão e consulta.
    \item \textbf{Emissão em Lote:} Implementar uma função para criar múltiplos certificados em uma única transação.
    \item \textbf{Exploração de Privacidade:} Pesquisar a integração com tecnologias de conhecimento-zero (Zero-Knowledge Proofs).
    \item \textbf{Implantação em Layer 2:} Realizar o deploy do contrato em uma rede de camada 2 para reduzir custos.
\end{itemize}

% --- REFERÊNCIAS ---
\begin{thebibliography}{1}
    \bibitem{OpenZeppelin}
    OpenZeppelin, ``OpenZeppelin Contracts: Secure Smart Contracts for Ethereum,'' \url{https://openzeppelin.com/contracts/}.
    \bibitem{Hardhat}
    Nomic Foundation, ``Hardhat: Ethereum Development Environment for Professionals,'' \url{https://hardhat.org/}.
    \bibitem{Solidity}
    Solidity Documentation, \url{https://docs.soliditylang.org/}.
\end{thebibliography}

\end{document}